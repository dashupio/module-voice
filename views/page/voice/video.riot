<voice-video>
  <div class={ `video-wrapper bg-secondary h-100 w-100${props.conn && props.conn.active ? ' border border-success' : ''}` }>
    <div id={ id } class="w-100 h-100" />
    <div class="video-buttons d-flex justify-content-center">
      <button class="btn btn-primary mx-1" onclick={ (e) => onToggleMuted(e) }>
        <i class={ `fa fa-fw fa-${props.mine ? `microphone${isAudio() ? '' : '-slash'}` : `volume${isAudio() ? '-up' : '-slash'}`}` } />
      </button>
      <button class="btn btn-primary mx-1" onclick={ (e) => onToggleVideo(e) }>
        <i class={ `fa fa-fw fa-video${isVideo() ? '' : '-slash'}` } />
      </button>
    </div>
  </div>

  <script>
    // import dependencies
    import { v4 as uuid } from 'uuid';

    // video
    export default class VoiceVideo {

      /**
       * on mounted
       */
      onBeforeMount(props) {
        // set stream
        this.id = uuid();

        // safe update
        this.safeUpdate = () => {
          console.log('SAFE UPDATE');
          this.update();
        };
      }

      /**
       * on mounted
       */
      onMounted(props) {
        // set stream
        if (props.stream) {
          // setup
          this.setup(props);
        }

        console.log(props.conn);

        // if props con
        if (props.conn && !this.__listening) {
          // listening
          this.__listening = true;

          // update
          props.conn.on('update', this.safeUpdate);
        }
      }

      /**
       * on mounted
       */
      onUpdated(props) {
        // set stream
        if (props.stream) {
          // setup
          this.setup(props);
        }

        // if props con
        if (props.conn && !this.__listening) {
          // listening
          this.__listening = true;

          // update
          props.conn.on('update', this.safeUpdate);
        }
      }

      /**
       * on mounted
       */
      onBeforeUnmount(props) {
        // if props con
        if (this.__listening) {
          // update
          props.conn.removeListener('update', this.safeUpdate);
        }
      }

      /**
       * is muted
       */
      isVideo() {
        // return is on
        return this.props.stream.isVideoOn();
      }

      /**
       * is muted
       */
      isAudio() {
        console.log(this.props.stream);
        // return is on
        return this.props.stream.isAudioOn();
      }

      /**
       * on toggle muted
       */
      onToggleVideo(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // is muted
        if (this.isVideo()) {
          // enable
          this.props.stream.muteVideo();
        } else {
          // disable
          this.props.stream.unmuteVideo();
        }

        // update
        this.update();
      }

      /**
       * on toggle muted
       */
      onToggleMuted(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // is muted
        if (this.isAudio()) {
          // enable
          this.props.stream.muteAudio();
        } else {
          // disable
          this.props.stream.unmuteAudio();
        }

        // update
        this.update();
      }

      /**
       * setup
       */
      setup(props) {
        // play in element
        props.stream.play(this.id);
      }
    }
  </script>

  <style>
    video {
      background : var(--secondary);
    }
    .border {
      transition   : all 0.5s ease;
      border-width : .25rem!important;
    }
    .video-wrapper {
      position     : relative;
      border-width : 0;
    }
    .video-buttons {
      left     : 1rem;
      right    : 1rem;
      bottom   : 1rem;
      opacity  : 0;
      position : absolute;
    }
    .video-wrapper:hover .video-buttons {
      opacity : 1;
    }
  </style>
</voice-video>